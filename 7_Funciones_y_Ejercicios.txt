/*FUNCIONES: def: Bloque de codigo creado para realizar una determinada operación.
El codigo de ejecuta cuando la funcion es llamada
Puede recibir datos (parametros) y devolver un valor 
Functions, which allow you to store a piece of code that does a single task inside a defined block

sintaxis 

function name(params) { // params opcionales
//    intrucciones
     return valor // opcional
}

sintaxis de la llamada
functionname(params) */

// Las funciones, responden a razonamientos logicos matematicos, se le colocan parametros de ingreso. Some functions require parameters to be specified when you are invoking them — these are values that need to be included inside the function parentheses, which it needs to do its job properly.

//Note: Parameters are sometimes called arguments, properties, or even attributes.



// EJERCICIO 1 Sin params ni retorno

function saludo1(){
    console.log("Hola");
}
saludo1();

// EJERCICIO 2 Con params sin retorno

function saludo2(saludo) {
    console.log(saludo);
};

saludo2("Hola");

// EJERCICIO 3 CON params CON retorno. Cuando usamos la funcion pidiendo un return. se usa un valor de retorno donde la función es un paso intermedio en un cálculo de algún tipo. Quieres llegar a un resultado final, que involucra algunos valores. Esos valores deben ser calculados por una función, que luego devuelve los resultados para que puedan usarse en la siguiente etapa del cálculo.

function saludo3(saludo) {
    return saludo;
};

//  SIEMPRE que veamos una llamada de una funcion dentro de otro funcion
// o metodo o asignada a una variable, esa funcion tiene RETURN

let s = saludo3("Hola");
console.log(s);

console.log(saludo3("Hola"));

// como reemplazar un valor o una informacion. 
// Built-in browser functions
/* We've used functions built in to the browser a lot in this course.*/

var myText = 'I am a string';
var newString = myText.replace('string', 'sausage');
console.log(newString);

// Or every time we manipulated an array:

const myArray = ['I', 'love', 'dogs'];
const madeAString = myArray.join(' ');
console.log(madeAString);

// the join() function takes an array, joins
// all the array items together into a single
// string, and returns this new string

// MATH.RANDOM : the browser's built-in Math.random() function doesn't require any parameters. When called, it always returns a random number between 0 and 1: 
const number = Math.random(); 
console.log(number);

// the random() function generates a random number between
// 0 andup to but not including 1, and returns that number
// Math.random() function only generates a random decimal number between 0 and 1.

function random(number) {
    return Math.floor(Math.random()*number);
  }
console.log(number);

// REMEMBER: Functions that are part of objects are called methods. Anytime you saw a custom name with parentheses straight after it, you were using a custom function.

// Ejemplo de una funcion en JS para crear circulos. This function draws 100 random circles inside a <canvas> element.

/*function draw() {
  ctx.clearRect(0,0,WIDTH,HEIGHT);
  for (let i = 0; i < 100; i++) {
    ctx.beginPath();
    ctx.fillStyle = 'rgba(255,0,0,0.5)';
    ctx.arc(random(WIDTH), random(HEIGHT), random(50), 0, 2 * Math.PI);
    ctx.fill();
  }
}*

draw();
Si queremos llamr a la funcion,la invocamos con la palabra -draw-
*/


// The keydown event is fired when a key is pressed, any key: regardless of whether they produce a character value.The keydown and keyup events provide a code indicating which key is pressed, while keypress indicates which character was entered. For example, a lowercase "a" will be reported as 65 by keydown and keyup, but as 97 by keypress. An uppercase "A" is reported as 65 by all events..

// EJEMPLO 2: calculo de impuesto (iva) y gastos de envio segun zona: sintaxis : switch (en fn de q ) > case name: > break; > 
// aca estamos definiendo una funcion para calcular el el precio final de un producto al adiconarle el iva, dado que la zona de envio (z) hace la variacion de precio. El comando switch sirve para indicarle al programa que evaluara esa cuenta en diferentes casos, donde aqui se hace en funcion de la zona. 

function calculo_iva (p, i, z){
    let total_prod = p * (1+i /100 );
    switch (zona_) {
        case "Madrid":
            total_prod +=10;
        break;
        case "Barcelona":
            total_prod += 12;
        break;
        case "Mataro":
            total_prod += 10; 
        break; 
        default: 
        console.log("Zona sin gastos de envio");
        break; 
    }
        return total_prod;
};

let prec_Proc = 100;
let iva_ = 21;

let zona_ = "Madrid"; 

console.log(calculo_iva(prec_Proc, iva_, zona_));
console.log("---------------------------------------------------------");



function calculo_iva_gasto_envio(p, i, z) {
    let total = p * (1 + i / 100);
    switch (z) {
        case "Peninsula":
            total += 10;
            break;
        case "Baleares":
            total += 12;
            break;
        case "Canarias":
            total += 15;
            break;
        default:
            console.log("Zona de envio erronea");
            break;
    }
    return total;
}

let precio_producto = 100;
let iva = 21;
let zona = "Peninsula";

console.log(calculo_iva_gasto_envio(precio_producto, iva, zona));

// The switch statement evaluates an expression, matching the expression's value against a series of case clauses, and executes statements after the first case clause with a matching value, until a break statement is encountered. The default clause of a switch statement will be jumped to if no case matches the expression's value.

// FUNCIONES FLECHA
// def: Misma funcionabilidad que las funciones tradicionales, pero con
// diferente sintaxis. (mas declarativas)
// Surgieron en la version ECMAScript 6

// sintaxis 

// Ejemplo funcion tradicional
function saludo() {
    console.log("Hola");
}
saludo();

const saludo = () => {
    console.log("Hola");
} 
saludo();

// se puede escribir asi:
const saludo = () => console.log("Hola");
 
saludo();
// ----------------------------------
// Ejemplo con params y retorno
function saludo3(saludo) {
    return saludo;
}

const saludo3 = saludo => saludo;
console.log(saludo3("Hola"));

// -----EJERCICIOS FUNCIONES------------------   

// Ejercicio: escribir codigo para la tabla del 10, o otros valores.
let tablas = multiplo => {
    for (let index = 0; index < 11 ; index++) {
        console.log(multiplo + "x" + index + "=" + multiplo* index);
    }
}

tablas(9);

// 1-Crear una funcion que calcule la suma, resta, multiplicacion y 
// division de dos números

let a = '';
let b = '';

function calculadora (a,b) {
    return a * b;
    
}

calculadora(1,3);

// una manera de hacerlo, pero es ineficiente por que luego podemos llamar a la funcion calculadora para que nos retorne la multiplicacion 


const multip_ = function (a,b) {
    return a * b;
}

const x = multip_ (4);

// tampoco nos serviria esta forma por que hay que escirbir para cada tipo de operacion, la manera mas eficiente seria haciendo concatenacion e imprimiendo en console log. 

let c = 3;
let f = 2;

function calculadora_ (num1,num2) {
    console.log(`La multiplicaion de ${num1} y ${num2} es ` + (num1 * num2));
    console.log(`La suma de ${num1} y ${num2} es ` + (num1 + num2));
    console.log(`La resta de ${num1} y ${num2} es ` + (num1 - num2));
    console.log(`La division de ${num1} y ${num2} es ` + (num1 / num2));
};



calculadora_(c,f);
calculadora_(4,7);
// esta forma de escribir la funcion, nos permite reducir codigo, imprimirlo en pantalla y decirle al sistema que se ingresaran dos numeros siempre para el pedido de la funcion. Num 1 y 2, ahora nosotros para el ejemplo colocamos c y f como constantes, pero podrian ser dos numeros cualquiera. ejemplo:: 

//calculadora_(4,7); colocado arriba. Funciona. 

 // Ejercicio hacer la calculadora anterior usando el Comando Switch- que evalua por caso. Swtich- Case: 'name' - break; y al final un Default+break. recordar que en switch, colocamos dos parametros de ingreso y un tercero que es el identifica a todos los cases en general para luego llamarlos. 

 function calculadora_switch (num3, num4, operacion) {
    switch(operacion) {
        case 'suma' :
            console.log(`La suma de ${num3} y ${num4} es `+ (num3 + num4));
            break;
        case 'resta' :
            console.log(`La resta de ${num3} y ${num4} es `+ (num3-num4));
            break;
        case 'multiplic' : 
            console.log(`La multiplicacion de ${num3} y ${num4} es ` +(num3*num4));
            break;
        case 'division':
            console.log(`La division entre ${num3} y ${num4} es ` +(num3/num4));
            break;
        default: 
            console.log(`Operacion indicada incorrecta`);
            break;
        }

    }

    let num3 = 5;
    let num4 = 6;
    calculadora_switch(num3, num4, 'suma'); 

    console.log('-----------------------------------------------');
    // Ejercicio: separa el codigo anterior en funciones independientes

    function suma (n1, n2) {
        return `La suma de ${n1} y ${n2} es ` + (n1+n2);
    }

    console.log(suma(5,10));

    function resta (n1, n2){
        return `La resta entre ${n1} y ${n2} es ` + (n1-n2);
    }

    console.log(resta(8,6));

    function division (n1,n2) {
        return `La division entre los numeros ${n1} y ${n2} es ` + (n1/n2);
    }

    console.log(division(25,5));

    function mult (n1, n2) {
        return `La multiplicacion entre ${n1} y ${n2} es `+ (n1*n2);
    }

    console.log(mult(12,3));

    // EEJERCICIO numero primo, devolviendo un true o false si es primo o no.

    function ident_num_primo (num) {
        if 
    }